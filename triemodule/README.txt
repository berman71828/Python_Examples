PYTHON-C INTEGRATION: TRIE MODULE

April 15, 2014

INTRODUCTION

In this demonstration program, the Python interpreter accepts
character-by-character input and displays matching country names. 
The reference list of country names, read in from a file at initialization,
is stored in an adaptation of the Trie data structure. In a Trie, each node
stores a character, a word being built up through successive nodes.

There are two versions of this program: one in which the Trie is
implemented in Gnu C and another in which the Trie is implemented
in Microsoft Visual C++. This is the Gnu C/Linux/Unix version.
The program has been tested with Python 2.7.6.

BUILDING

Run the shell file buildtrie.sh to obtain trie.so.

OPERATION

1. Start up a Python 2.7.X interpreter.
2. >>> from tshell import *
3. >>> doit()
   Output will indicate that countries have been populated.
4. Begin entering text. NOTE: the previous version was
   case sensitive. The current version is case insensitive.
   As each character is entered, the matching country names
   are shown.
5. When you are finished entering your string, press
   RETURN, and you will be prompted to begin entry of
   a new string. Enter 'y' to continue or 'n' to exit.

FILES

   triemodule.c - the Trie code in C
   tshell.py - the Python read-eval-print loop in Python
   getch.py - the character reader in Python
   buildtrie.sh - build script
   trie-setup.py - distutils glue for C extension
   outOfSchoolPrimaryAge.csv - data file from whence the country
       names are loaded. Note that we get some superflous strings
       such as REGION. OK for demonstration purposes. Originally
       part of a different project.
   trie.so - shared object file generated by the build script
   (may need to be rebuilt via buildtrie.sh)

ISSUES AND IMPROVEMENTS

The current version (April 15, 2014) returns a list of strings
from C to Python. In the previous version, the C code printed
the output strings directly.

This program is intended for demonstration purposes.
It would be adapted and 'hardened' for use in an actual
application. For example, safeguards should be implemented
on the large string buffers. Also, the trie implementation
is an adaptation which can be improved.

The algorithm for listing all substrings is a candidate
for parallelization, especially if there are a lot of
sibling nodes.

AUTHOR
Lewis Berman
liberman at loyola dot edu

